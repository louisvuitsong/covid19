{"version":3,"sources":["components/Header.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Main","areaName","Array","useState","city","setCity","key","corona","undefined","countryName","push","setData","useEffect","totalCase","parseInt","replaceAll","newCase","recovered","death","name","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","Death","Recovered","findItem","find","labels","map","datasets","label","backgroundColor","fill","borerColor","last","length","borderColor","console","log","options","legend","display","position","newCcase","newFcase","onChange","e","target","value","tit","en","kr","percentage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b93f13fc.chunk.js","sourcesContent":["\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>COVID-19</h1>\r\n            <select>\r\n            <option>국내</option>\r\n            <option>세계</option>\r\n            </select>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import corona from '../corona.json';\nimport {useState, useEffect} from 'react';\n\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\nimport axios from 'axios';\n// import { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nfunction Main() {\n  \n  let areaName = new Array();\n  let [city,setCity] = useState('seoul');\n\n  for(let key in corona){\n    if(corona[key].countryName != undefined){\n      areaName.push({\n        \"kr\":corona[key].countryName ,\n        \"en\":key\n      })\n    }\n  }\n\n  let areaChange = (e)=>{\n    console.log(e.target.value);\n    setCity(e.target.value)\n  }\n\n  const [data,setData] = useState();\n\n  useEffect(()=>{  \n    \n    let totalCase = parseInt(corona[city].totalCase.replaceAll(',','')),\n        newCase = parseInt(corona[city].newCase),\n        recovered = parseInt(corona[city].recovered.replaceAll(',','')),\n        death = parseInt(corona[city].death.replaceAll(',','')),\n        care = totalCase - (recovered + death);\n\n    setData([\n      {\n        name: '확진자',\n        '인원': totalCase,\n        '추가': newCase\n      },\n      {\n        name: '검사중',\n        '인원': care\n      },\n      {\n        name: '격리해제',\n        '인원': recovered\n      },\n      {\n        name: '사망자',\n        '인원': death\n      }\n    ]);\n      \n  },[city]);//useEffect end\n  \n  const [confirmedData, setConfirmedData] = useState({});\n  const [quarantinedData, setQuarantinedData] = useState({});\n  const [comparedData, setComparedData] = useState({});\n\n\n    useEffect(() => {\n\n        const fetchEvents = async () => {\n            const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\n            makeData(res.data)\n        }\n        const makeData = (items) => {\n            const arr = items.reduce((acc, cur) => {\n                const currentDate = new Date(cur.Date);\n                const year = currentDate.getFullYear();\n                const month = currentDate.getMonth();\n                const date = currentDate.getDate();\n                const confirmed = cur.Confirmed;\n                const active = cur.Active;\n                const death = cur.Death;\n                const recovered = cur.Recovered;\n\n                const findItem = acc.find(a => a.year === year && a.month === month);\n\n                if(!findItem){\n                    acc.push({year, month, date, confirmed, active, death, recovered})\n                }\n                if(findItem && findItem.date < date){\n                    findItem.active = active;\n                    findItem.death = death;\n                    findItem.date = date;\n                    findItem.year = year;\n                    findItem.month = month;\n                    findItem.recovered = recovered;\n                    findItem.confirmed = confirmed;\n                }\n                \n                return acc;\n            }, [])\n\n            const labels =  arr.map(a => `${a.month+1}월`);\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label: \"국내 누적 확진자\",\n                        backgroundColor: \"salmon\",\n                        fill: true,\n                        data: arr.map(a => a.confirmed)\n                    },\n                ]\n            });\n            setQuarantinedData({\n                labels,\n                datasets: [\n                    {\n                        label: \"월별 격리자 현황\",\n                        borerColor: \"salmon\",\n                        fill: false,\n                        data: arr.map(a => a.active)\n                    },\n                ]\n            });\n            const last = arr[arr.length -1]\n            setComparedData({\n                labels: [\"확진자\",\"격리해제\",\"사망\"],\n                datasets: [\n                    {\n                        label: \"누적 확진, 해제, 사망 비율\",\n                        backgroundColor: [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\n                        borderColor: [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\n                        fill: false,\n                        data: [last.confirmed, last.recovered, last.death]\n                    },\n                ]\n            });\n            console.log(last.death)\n        }\n        fetchEvents();\n    }, [])\n\n\n  return (\n    <>\n      <main>\n        <article className=\"ko\">\n          <h2>국내현황</h2>\n          <div>\n              <span>전체 확진환자<br />{corona['korea'].totalCase}</span>\n              <span>격리해제<br />{corona['korea'].recovered}</span>\n              <span>사망자<br />{corona['korea'].death}</span>\n              <div>\n                <Doughnut data={comparedData} options={\n                    { title: { display: true, text: `누적, 확진, 해제, 사망(${new Date().getMonth()+1}월))`, fontSize: 16}},\n                    { legend: { display: true, position: \"bottom\"}}\n                } />\n              </div>\n          </div>\n          <div>\n              <span>일일확진자{corona['korea'].newCase}</span>\n              <span>국내발생 {corona['korea'].newCcase}</span>\n              <span>해외유입 {corona['korea'].newFcase}</span>\n          </div>\n          <div>\n            <Line data={quarantinedData} options={\n                { title: { display: true, text: \"월별 격리자 현황\", fontSize: 16}},\n                { legend: { display: true, position: \"bottom\"}}\n            } />\n          </div>\n          <div>\n            <Bar data={confirmedData} options={\n                { title: { display: true, text: \"누적 확진자 추이\", fontSize: 16}},\n                { legend: { display: true, position: \"bottom\"}}\n            } />\n          </div>\n        </article>\n\n        <article className=\"area\">\n        <h2>도시별 확진자, 완치자 현황</h2>\n          <div>\n            <p>📢 원하는 지역을 선택해주세요</p>\n            <select onChange={areaChange}>\n              {\n                areaName.map(tit =>{    \n                  return (<option key={tit.en} value={tit.en}>\n                            {tit.kr}\n                          </option>);\n                })\n              }\n            </select>\n            <table>\n              <caption>{corona[city].countryName}</caption>\n              <thead> \n                <tr>\n                  <th>확진자</th><th>완치자</th><th>사망자</th><th>발생률</th>  \n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    {corona[city].totalCase}명\n                    (+{corona[city].newCase})\n                  </td>\n                  <td>{corona[city].recovered}명</td>\n                  <td>{corona[city].death}명</td>\n                  <td>{corona[city].percentage}</td>\n                </tr>\n              </tbody>\n            </table>\n            {/* <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                width={500}\n                height={200}\n                data={data}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"인원\" stackId=\"a\" fill=\"#8884d8\" />\n                <Bar dataKey=\"추가\" stackId=\"a\" fill=\"#822ca9d\" />\n              </BarChart>\n            </ResponsiveContainer> */}\n          </div>  \n        </article>\n      </main>\n    </>\n  );\n}\n\nexport default Main;\n","\nimport './App.css';\nimport Header from './components/Header';\nimport Contents from './components/Contents';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      {/* <Contents /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}